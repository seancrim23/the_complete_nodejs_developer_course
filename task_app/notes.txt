*************************************************************************************************
advanced node topics (task app)								                    				*
*************************************************************************************************

-MongoDB
	-NOSQL
	
	- very easy to insert/connect/etc
		-essentially all you have to do is provide the connection details to initialize the client and
		then you can use that along with helper functions to interact with the database.
	
	-mongodb has rich documentation
	
-Promise diagram (review)

							fulfilled
							/
	- PROMISE -- pending -->
							\
							rejected
						
						
- MONGOOSE js library
	
	- essentially a library built on top of MongoDB that streamlines the process of making db calls.
		- object based. you can define a new object and then easily use that object to interact with the db
		as desired.
		
	- define a model -> create an object (based on the model) -> save/etc. the object
	
- STRUCTURE OF HTTP REQUEST:

	- 3 main pieces
	
		- request line: contains http method, the path, and the http protocol
		- request headers: nothing more than key value pairs that allow you to attach info to the request
		- request body: data provided to the request
		
- basic algorithm for setting up endpoint

	- define an express application (const app = express();)
		- on this "app" express app, define routers (app.post(...), app.get(...), app.etc(...)) 
		These will have the url route itself set up and define what happens when that endpoint is hit
			ex. app.get('/tasks', async (req, res) => {

					try{
						const tasks = await Task.find({});
						res.send(tasks);
					}catch(e){
						res.status(500).send(e);
					}

				});
				
				- this route will run when the localhost:port_num/tasks endpoint is hit with a GET request, and will either return
				the array of all of the tasks from the database or will return an error on failure
		
- passing in values to definition of API endpoints
	
	-very simple, in the request definition, simply add ":parameter_name" to the endpoint.
		-ex. app.get('/something/:id'...) this will allow you to pass a value for the "id" parameter into the request
			- it can then be accessed on the request object that gets populated in the callback function
			
- PROMISE CHAINING
	
	-method of making multiple promise calls more concise
	
		ex: add(1, 2).then(sum => {
				console.log(sum);
				return add(sum, 19);
			}).then(sum2 => {
				console.log(sum2);
			}).catch(error => {
				console.log(error);
			});
			- in returning the second "add" function, we become able to add the second "then"
			that can handle the response from the add function call that gets returned. we can continue
			chaining these for as long as needed (although i don't personally see a reason to do this
			for readability sake)
			
- Securely storing a user's password with "bcryptjs"

	-bcrypt includes a hash function that can be used to encrypt passwords
		- according to the instructor, 8 rounds of the algorithm is the sweet spot.
		
	-bcyrpt also contains a comparison function that will return true/false if the password matches the hash

- Making use of Mongoose Schemas
	
	- these can allow for actions to occur on specific triggers:
		ex. userSchema.pre('save', async function (next) {
				const user = this;

				if (user.isModified('password')) {
					user.password = await bcrypt.hash(user.password, 8);
				}

				next();
			});
			- when a "save" operation occurs for any object that falls under the "user" schema
			this code will fire off and will hash the password that is submit by the user to secure it in the 
			database. can use this many other ways as needed
			
- Integrating the "jsonwebtoken" library

	- used so when a user creates a new account, they should not have to enter their credentials again in order to log in
	
-Difference between schema "statics" and schema "methods"

	- STATICS are accessible on the MODEL
		- if we have a User model, we can use User.static_function
	- METHODS are accesible on the INSTANCE
		- if we have an instance of User model called user, we can use user.method
		
- creating Express middleware

	-allows us to customize our server to fit our needs
	
		- ex: app.use((req, res, next) => {
				res.status(503).send('Site is currently down. Please check back later!');
			});
				- this function will be able to intercept any requests made and return the maintenance response. also
				users will not be able to complete any of these requests as we are not making use of "next()"
				
-Authentication logic

	- must define an authentication function.
		
		-this function can be passed into our routers to provide a sort of filter.
			-you must define headers that will hold the authorization tokens.
			
				- pass the token to the auth -> verify the token (using unique signature) -> find the user/data that has that decoded token
				
			
- Error handler logic (for file uploads)
				
		- errors will get returned by routes on error. we can define the messages that are sent back to make them meaningful
			- when we define the route, we can pass a second callback function that can contain the error object (if there is an error)
				-on error we simply return whatever the error message that was returned that was defined in the model object
			
- using Environment Variables

	- define an environment file
	
		- download some sort of tool that allows us to point to that environment file on startup (env-cmd in our case)
		
			- replace the static references to environment properties with process.env.PROPERTY_KEY to use the value of that property.
			
	- allows us to increase security and also makes it easier to update our code.
		- rather than having to replace a static string 100 times we can upgrade it 1 time to update 100 uses

-libraries for testing NodeJS

	- Mocha, Jest (lots of rich docs for Jest)
	
		- need to add a "done" parameter to any test that includes an asynchronous operation
		
-Setting up and tearing down for NodeJS testing

	- can invoke "before" and "after" functions (beforeEach() and afterEach() for example)
		-use these to set up and tear down tests before and after the test runs. Need to make sure there is no remaining information generated from the tests that can compromise
		future tests.
